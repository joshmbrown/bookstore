@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookstoreRepository>


    <h3 class="bg-light rounded p-3" style="border: solid gray 1px;">
        Book Catalog
        <NavLink class="btn btn-success float-right" href="/admin/books/add">Add Book</NavLink>
    </h3>


<table class="table table-sm table-striped table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Author</th>
            <th class="align-middle text-center">Details</th>
            <th class="align-middle text-center">Edit</th>
            <th class="align-middle text-center">Delete</th>
        </tr>
    </thead>
    <tbody>
        @if (BookData?.Count() > 0)
        {
            @foreach (Book b in BookData)
            {
                <tr>
                    <td class="align-middle">@b.BookId</td>
                    <td class="align-middle">@b.Title</td>
                    <td class="align-middle">@b.Author</td>

                    <td class="align-middle text-center">
                            <NavLink class="btn btn-primary btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
                    </td>
                    <td class="align-middle text-center">
                            <NavLink class="btn btn-secondary btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
                    </td>
                    <td class="align-middle text-center">
                            <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">No Books</td>
            </tr>
        }
    </tbody>
</table>


@code {
    public IBookstoreRepository repo => Service;
    public IEnumerable<Book> BookData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }

    public async Task RemoveBook(Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";
}
